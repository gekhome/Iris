@using Iris.DAL;
@using Iris.Models;

@{
    ViewBag.Title = "Τροποποιητικές αναθέσεις";
    Layout = "~/Views/Shared/_Admin2Layout.cshtml";
}

<style>
    .k-grid {
        font-size: 11px;
    }
</style>

    @Html.AntiForgeryToken()
    <div class="page-header" style="margin:5px 30px 5px 30px">
        <span style="margin:5px 30px 5px 0px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
            <font style="color:#494949;font-family:'Segoe UI'">Τροποποιητικές αναθέσεις</font>
        </span>
        <span style="margin:5px 10px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin2", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
        <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGrid()">Ανανέωση</button>
    </div>


<div class="body-content" style="margin:10px 30px 5px 30px">
    @(Html.Kendo().Grid<SchoolsGridViewModel>()
        .Name("Grid1")
        .Columns(columns =>
        {
            columns.Bound(m => m.ΕΠΩΝΥΜΙΑ).FooterTemplate(@<text>Σύνολο Πλήθος: @item.Count</text>).Width(30);
            columns.ForeignKey(m => m.ΔΟΜΗ, (IEnumerable<ΣΥΣ_ΕΚΠΑΙΔΕΥΤΙΚΕΣ_ΔΟΜΕΣ>)ViewData["schoolDomes"], "ΚΩΔΙΚΟΣ", "ΜΟΝΑΔΑ").Width(20);
            columns.ForeignKey(m => m.ΠΕΡΙΦΕΡΕΙΑΚΗ, (IEnumerable<ΣΥΣ_ΠΕΡΙΦΕΡΕΙΑΚΕΣ>)ViewData["periferiakes"], "ΚΩΔΙΚΟΣ_ΠΕΡΙΦΕΡΕΙΑ", "ΕΠΩΝΥΜΙΑ_ΠΕΡΙΦΕΡΕΙΑ").Width(50);
        })
        .HtmlAttributes(new { style="font-size:12px" })
        .Filterable()
        .Groupable()
        .Selectable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(180))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .DataSource(datasource => datasource
        .Ajax()
        .PageSize(60)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.ΣΧΟΛΗ_ΚΩΔ);
            model.Field(p => p.ΔΟΜΗ).DefaultValue(1);
            model.Field(p => p.ΠΕΡΙΦΕΡΕΙΑΚΗ).DefaultValue(1);
        })
        .Read(read => read.Action("School_Read", "Admin2"))
        ) @* datasource*@
        .Events(e => e.Change("change"))
    )
</div>

<div class="body-content" style="margin:10px 30px 5px 30px;font-size:14px;background-color:dimgray;padding:4px 4px 4px 4px;height:40px">
    <label style="font-size:14px;font-weight:bold;color:white">Σχολικό έτος : </label>
    @(Html.Kendo().DropDownList()
        .Name("ddlSchoolYear")
        .DataTextField("ΣΧΟΛΙΚΟ_ΕΤΟΣ")
        .DataValueField("SCHOOLYEAR_ID")
        .HtmlAttributes(new { style = "width:230px;font-size:14px;font-weight:bold" })
        .OptionLabel("Επιλογή...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetSchoolYears", "Admin2"); }).ServerFiltering(true); })
        .Events(e =>
        {
            e.Select("ddlselect");
        })
    )
    <span style="margin:0px;float:right;font-family:'Segoe UI';font-size:12px">
        <input style="font-family:'Segoe UI';font-size:13px" type="button" onclick="transferAnathesi()" value="Μετακίνηση ανάθεσης" class="btn btn-default" />
    </span>
    <span style="margin-right:10px;float:right;font-family:'Segoe UI';font-size:14px">
        <label style="font-size:14px;color:white">Ανάθεση προορισμού : </label>
        @(Html.Kendo().DropDownList()
        .Name("ddlanathesi")
        .DataTextField("ANATHESI_TYPE")
        .DataValueField("ANATHESI_ID")
        .HtmlAttributes(new { style = "width:230px;font-size:14px;font-weight:bold" })
        .OptionLabel("Επιλογή...")
        .AutoBind(true)
        .Enable(true)
        .DataSource(source => { source.Read(read => { read.Action("GetAnathesiTypes", "Admin2"); }).ServerFiltering(true); })
        )
    </span>
</div>

<div class="body-content" style="margin:5px 30px 5px 30px;font-size:small">
    @(Html.Kendo().Grid<AnathesiModifyViewModel>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΑΦΜ).Width(14).Groupable(false);
            columns.Bound(c => c.ΕΠΩΝΥΜΟ).Width(23).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.ΟΝΟΜΑ).Width(20).Groupable(false);
            columns.Bound(c => c.ΠΑΤΡΩΝΥΜΟ).Width(18).Groupable(false).Filterable(false);
            columns.ForeignKey(f => f.ΕΙΔΙΚΟΤΗΤΑ_ΚΩΔ, (IEnumerable<sqlEIDIKOTITES>)ViewData["eidikotites"], "ΚΩΔΙΚΟΣ", "ΕΙΔΙΚΟΤΗΤΑ").Width(40);
            columns.Bound(c => c.ΩΡΕΣ_ΕΒΔ_ΑΠΟ).Width(8).Groupable(false).Filterable(false).Title("Ωρ.από");
            columns.Bound(c => c.ΩΡΕΣ_ΕΒΔ_ΣΕ).Width(8).Groupable(false).Filterable(false).Title("Ωρ.σε");
            columns.Bound(c => c.ΑΠΟΦΑΣΗ_ΚΩΔ).Width(11).Title("Απόφ.").Filterable(false);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(32);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Navigatable()
        .Selectable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Filterable()
        .HtmlAttributes(new { style = "display: block;font-size:12px" })
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(260))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΑΝΑΘΕΣΗ_ΚΩΔ);
                model.Field(p => p.ΕΙΔΙΚΟΤΗΤΑ_ΚΩΔ).DefaultValue(ViewData["defaultEidikotita"]);
                model.Field(p => p.ΩΡΕΣ_ΕΒΔ_ΑΠΟ).DefaultValue(0);
                model.Field(p => p.ΩΡΕΣ_ΕΒΔ_ΣΕ).DefaultValue(0);
                model.Field(p => p.ΑΠΟΦΑΣΗ_ΚΩΔ).Editable(false);                                
            })
            .Create(create => create.Action("AnathesiModify_Create", "Admin2").Data("data"))
            .Read(read => read.Action("AnathesiModify_Read", "Admin2").Data("data"))
            .Update(update => update.Action("AnathesiModify_Update", "Admin2").Data("data"))
            .Destroy(destroy => destroy.Action("AnathesiModify_Destroy", "Admin2"))
            .Aggregates(a =>
            {
                a.Add(p => p.ΕΠΩΝΥΜΟ).Count();
            })
            .Events(events => events.Error("error_handler_norefresh"))
        )
    )
</div>

<script type="text/javascript">

    function transferAnathesi() {
        var anathesipicker = $("#ddlanathesi").data("kendoDropDownList");
        var target_anathesiType = anathesipicker.value();

        var grid = $("#Grid").data("kendoGrid");
        var dataRow = grid.dataItem(grid.select());

        if (target_anathesiType && dataRow) {
            var source_anathesiID = dataRow.ΑΝΑΘΕΣΗ_ΚΩΔ;
            var source_apofasiType = dataRow.ΑΠΟΦΑΣΗ_ΕΙΔΟΣ;
            //MessageBoxAlert(target_anathesiType + ", " + source_anathesiID + ", " + source_apofasiType);

            $.ajax({
                url: '@Url.Action("TransferAgent", "Admin2")?sourceAnathesiId=' + source_anathesiID + '&apofasiType=' + source_apofasiType + '&targetAnathesiType=' + target_anathesiType,
                type: 'GET',
                data: "",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data != "") MessageBoxAlert(data);
                    RefreshGrid();
                },
                error: function () {
                    MessageBoxAlert("Προέκυψε σφάλμα. Δοκιμάστε πάλι αργότερα.");
                }
            });

        }
        else {
            MessageBoxAlert("Πρέπει να γίνει επιλογή είδους ανάθεσης προορισμού και ανάθεσης προέλευσης.")
        }
    }

    function ddlselect(e) {
        var dataItem = this.dataItem(e.item.index());
        var grid1 = $("#Grid1").data("kendoGrid");
        var dataRow = grid1.dataItem(grid1.select());

        if (dataItem && dataRow) {
            var syearID = dataItem.SCHOOLYEAR_ID;
            var schoolID = dataRow.ΣΧΟΛΗ_ΚΩΔ;
            $("#Grid").data("kendoGrid").dataSource.read({ schoolyearId: syearID, schoolId: schoolID });
            $("#Grid").css("display", "block");
        }
        else {
            $("#Grid").data("kendoGrid").dataSource.read({ schoolyearId: 0, schoolId: 0 });
            $("#Grid").css("display", "block");
        }
    };

    function change(e) {
        var syearpicker = $("#ddlSchoolYear").data("kendoDropDownList");
        var syearID = syearpicker.value();

        var dataItem = this.dataItem(this.select());
        var schoolID = dataItem.ΣΧΟΛΗ_ΚΩΔ;

        if (syearID) {
            $("#Grid").data("kendoGrid").dataSource.read({ schoolyearId: syearID, schoolId: schoolID });
            $("#Grid").css("display", "block");
        }
        else {
            $("#Grid").data("kendoGrid").dataSource.read({ schoolyearId: 0, schoolId: 0 });
            $("#Grid").css("display", "block");
        }
    }

    function data() {
        var syearID = $("#ddlSchoolYear").data("kendoDropDownList").value();
        var masterGrid = $("#Grid1").data("kendoGrid");
        var dataItem = masterGrid.dataItem(masterGrid.select());

        if (dataItem && syearID) {
            var schoolID = dataItem.ΣΧΟΛΗ_ΚΩΔ;
            return {
                schoolyearId: syearID,
                schoolId: schoolID
            }
        }
        else {
            return {
                schoolyearId: 0,
                schoolId: 0
            }
        }
    }

    function RefreshGrid(e) {
        var grid = $("#Grid").data("kendoGrid");
        grid.dataSource.read();
    }

</script>
